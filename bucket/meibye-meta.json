{
  "version": "2025.09.07.1",
  "description": "General meta-shims for tools under C:\\Tools\\apps\\*\\*\\current (+plugins) with dry-run, versioned names, and summary map.",
  "homepage": "https://github.com/meibye",
  "license": "Proprietary",
  "architecture": {
    "64bit": {},
    "32bit": {}
  },
  "persist": ["state"],
  "installer": {
    "script": [
      "$ErrorActionPreference = 'Stop'",
      "$root = 'C:\\Tools\\apps'",
      "$stateDir = Join-Path $dir 'state'",
      "New-Item -ItemType Directory -Force -Path $stateDir | Out-Null",
      "$stateFile = Join-Path $stateDir 'shims.txt'",
      "$mapFile = Join-Path $stateDir 'shims-map.csv'",
      "if (Test-Path $stateFile) { Remove-Item $stateFile -Force }",
      "if (Test-Path $mapFile) { Remove-Item $mapFile -Force }",
      "",
      "# Controls:",
      "# MEIBYE_META_FAMILIES = 'onemore,py-tools' (optional filter)",
      "# MEIBYE_META_INCLUDE_VERSION = '1' to include version in shim name",
      "# MEIBYE_META_DRYRUN = '1' to only print plan and write summary map",
      "",
      "$envFamilies = ($env:MEIBYE_META_FAMILIES -split ',' | ForEach-Object { $_.Trim() } | Where-Object { $_ })",
      "$includeVersion = ($env:MEIBYE_META_INCLUDE_VERSION -eq '1')",
      "$dryRun = ($env:MEIBYE_META_DRYRUN -eq '1')",
      "",
      "function Write-State([string]$name){ if (-not $dryRun) { Add-Content -Path $stateFile -Value $name } }",
      "function Init-Map(){ 'shim,type,family,app,plugin,leaf,ext,version,interpreter,target,dryrun' | Out-File -Encoding UTF8 $mapFile }",
      "function Record-Map($shim,$type,$family,$app,$plugin,$leaf,$ext,$ver,$interp,$target){",
      "  $row = @($shim,$type,$family,$app,$plugin,$leaf,$ext,$ver,$interp,$target,([int]$dryRun)) -join ','",
      "  Add-Content -Path $mapFile -Value $row",
      "}",
      "",
      "Init-Map",
      "",
      "# Detect interpreters",
      "$pwsh = (Get-Command pwsh.exe -ErrorAction SilentlyContinue)?.Source",
      "if (-not $pwsh) { $pwsh = (Get-Command powershell.exe -ErrorAction SilentlyContinue)?.Source }",
      "$py = (Get-Command py.exe -ErrorAction SilentlyContinue)?.Source",
      "$python = (Get-Command python.exe -ErrorAction SilentlyContinue)?.Source",
      "$gitBash = 'C:\\Program Files\\Git\\bin\\bash.exe'",
      "$hasGitBash = Test-Path $gitBash",
      "$hasWsl = [bool](Get-Command wsl.exe -ErrorAction SilentlyContinue)",
      "",
      "function Add-Shim($shim,$path){ if ($dryRun){ return } ; scoop shim add $shim $path | Out-Null }",
      "function Add-Shim-Args($shim,$exe,$args){ if ($dryRun){ return } ; scoop shim add $shim $exe $args | Out-Null }",
      "",
      "function Resolve-Version($currentPath){",
      "  try {",
      "    $it = Get-Item -LiteralPath $currentPath -ErrorAction Stop",
      "    if ($it.Attributes -band [IO.FileAttributes]::ReparsePoint) {",
      "      $t = (Get-Item -LiteralPath $currentPath).Target",
      "      if ($t) { return Split-Path -Leaf $t }",
      "    }",
      "  } catch { }",
      "  # Fallback: last non-'current' segment if path is already a version folder",
      "  return ''",
      "}",
      "",
      "function New-ShimName($family,$app,$plugin,$leaf,$ver){",
      "  $base = if ($plugin) { $family + '-' + $plugin + '-' + $leaf } else { $family + '-' + $app + '-' + $leaf }",
      "  if ($includeVersion -and $ver) { return ($base + '-v' + $ver) }",
      "  return $base",
      "}",
      "",
      "function Ensure-Unique($name){",
      "  # Avoid collisions by appending -2, -3, ... if shim already exists",
      "  $n = $name; $i = 2",
      "  $shimsDir = Join-Path (scoop prefix scoop) 'shims'",
      "  while (Test-Path (Join-Path $shimsDir ($n + '.exe'))) { $n = \"$name-$i\"; $i++ }",
      "  return $n",
      "}",
      "",
      "if (-not (Test-Path $root)) { Write-Warning \"Root not found: $root\"; return }",
      "",
      "Get-ChildItem -Path $root -Directory | ForEach-Object {",
      "  $family = $_.Name",
      "  if ($envFamilies.Count -gt 0 -and ($envFamilies -notcontains $family)) { return }",
      "  Get-ChildItem -Path $_.FullName -Directory | ForEach-Object {",
      "    $app = $_.Name",
      "    $current = Join-Path $_.FullName 'current'",
      "    if (!(Test-Path $current)) { return }",
      "    $ver = Resolve-Version $current",
      "",
      "    function Process-Files($files,$pluginName){",
      "      foreach ($f in $files) {",
      "        $leaf = [IO.Path]::GetFileNameWithoutExtension($f.Name)",
      "        $ext = $f.Extension.ToLower()",
      "        $shimBase = New-ShimName $family $app $pluginName $leaf $ver",
      "        $shim = Ensure-Unique $shimBase",
      "        switch ($ext) {",
      "          '.ps1' {",
      "            $interp='pwsh' ;",
      "            if ($pwsh) { Add-Shim-Args $shim $pwsh ('-NoProfile -ExecutionPolicy Bypass -File \"' + $f.FullName + '\" -- %*') }",
      "            else { $interp='direct'; Add-Shim $shim $f.FullName }",
      "            Record-Map $shim 'root' $family $app $pluginName $leaf $ext $ver $interp $($f.FullName)",
      "            Write-State $shim",
      "          }",
      "          '.py'  {",
      "            $interp = if ($py) { 'py' } elseif ($python) { 'python' } else { 'direct' }",
      "            if ($py) { Add-Shim-Args $shim $py ('-3 \"' + $f.FullName + '\" %*') }",
      "            elseif ($python) { Add-Shim-Args $shim $python ('\"' + $f.FullName + '\" %*') }",
      "            else { Add-Shim $shim $f.FullName }",
      "            Record-Map $shim 'root' $family $app $pluginName $leaf $ext $ver $interp $($f.FullName)",
      "            Write-State $shim",
      "          }",
      "          '.cmd' { Add-Shim $shim $f.FullName; Record-Map $shim 'root' $family $app $pluginName $leaf $ext $ver 'direct' $($f.FullName); Write-State $shim }",
      "          '.bat' { Add-Shim $shim $f.FullName; Record-Map $shim 'root' $family $app $pluginName $leaf $ext $ver 'direct' $($f.FullName); Write-State $shim }",
      "          '.sh'  {",
      "            if ($hasGitBash) {",
      "              $posix = $f.FullName -replace '\\\\','/'",
      "              Add-Shim-Args $shim $gitBash ('-c \"\\\"' + $posix + '\\\" %*\"') ;",
      "              Record-Map $shim 'root' $family $app $pluginName $leaf $ext $ver 'git-bash' $($f.FullName) ; Write-State $shim",
      "            } elseif ($hasWsl) {",
      "              $posix = $f.FullName -replace '\\\\','/'",
      "              Add-Shim-Args $shim 'wsl.exe' ('bash -lc \"\\\"' + $posix + '\\\" %*\"') ;",
      "              Record-Map $shim 'root' $family $app $pluginName $leaf $ext $ver 'wsl-bash' $($f.FullName) ; Write-State $shim",
      "            } else { Write-Warning \"Skipping .sh: $($f.Name) — no Git Bash/WSL found\" }",
      "          }",
      "          '.zsh' {",
      "            if ($hasWsl) {",
      "              $posix = $f.FullName -replace '\\\\','/'",
      "              Add-Shim-Args $shim 'wsl.exe' ('zsh -lc \"\\\"' + $posix + '\\\" %*\"') ;",
      "              Record-Map $shim 'root' $family $app $pluginName $leaf $ext $ver 'wsl-zsh' $($f.FullName) ; Write-State $shim",
      "            } else { Write-Warning \"Skipping .zsh: $($f.Name) — no WSL zsh found\" }",
      "          }",
      "        }",
      "      }",
      "    }",
      "",
      "    # 1) Root-level scripts in current",
      "    $rootFiles = Get-ChildItem -Path $current -File -Include *.ps1,*.py,*.cmd,*.bat,*.sh,*.zsh -ErrorAction SilentlyContinue",
      "    Process-Files $rootFiles $null",
      "",
      "    # 2) Plugin scripts",
      "    $plugins = Join-Path $current 'plugins'",
      "    if (Test-Path $plugins) {",
      "      Get-ChildItem -Path $plugins -Directory | ForEach-Object {",
      "        $plugin = $_.Name",
      "        $pfiles = Get-ChildItem -Path $_.FullName -File -Recurse -Include *.ps1,*.py,*.cmd,*.bat,*.sh,*.zsh -ErrorAction SilentlyContinue",
      "        Process-Files $pfiles $plugin",
      "      }",
      "    }",
      "  }",
      "}",
      "",
      "Write-Host ('Meta-shims ' + ($(if($dryRun){'planned'}) else {'installed'}) + '. Summary map: ' + $mapFile)",
      "if (-not $dryRun -and (Test-Path $stateFile)) {",
      "  $n = (Get-Content $stateFile).Count",
      "  Write-Host ('Created ' + $n + ' shims. State file: ' + $stateFile)",
      "}"
    ]
  },
  "uninstaller": {
    "script": [
      "$ErrorActionPreference = 'Continue'",
      "$stateFile = Join-Path (Join-Path $dir 'state') 'shims.txt'",
      "if (Test-Path $stateFile) {",
      "  Get-Content $stateFile | ForEach-Object {",
      "    try { scoop unshim $_ | Out-Null } catch { }",
      "  }",
      "  Remove-Item $stateFile -Force -ErrorAction SilentlyContinue",
      "}",
      "# Leave shims-map.csv for audit unless you want to remove it:",
      "# Remove-Item (Join-Path (Join-Path $dir 'state') 'shims-map.csv') -Force -EA SilentlyContinue"
    ]
  },
  "notes": [
    "Shim naming: <family>-<plugin>-<tool> (plugins) or <family>-<app>-<tool> (root).",
    "Set MEIBYE_META_INCLUDE_VERSION=1 to append '-v<version>' (derived from the 'current' target).",
    "Set MEIBYE_META_DRYRUN=1 to plan only; creates 'state\\shims-map.csv' without creating shims.",
    "Set MEIBYE_META_FAMILIES=onemore,py-tools to limit scanning.",
    "Summary map written to 'state\\shims-map.csv' with shim→target and metadata."
  ]
}
